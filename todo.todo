Version 1.0 ////////////////////////////////////:
 ✔ Remove the # end ... comments @done (17-09-16 22:58)
 ✔ Implement Engines @done (17-09-19 19:57)
  ✔ For now, just provide a python simple mock engine @done (17-09-17 12:45)
  ✔ current engine needs to be redone, it is not used @done (17-09-17 12:45)
  ✔ MayapyEngine @done (17-09-18 22:54)
   ✔ Where does the output of an engine go? @done (17-09-18 22:54)
   ✘ Unittests for it @cancelled (17-09-18 22:54)

if __name__ == '__main__':
    from flowpipe.nodes.value_node import ValueNode
    from flowpipe.graph import Graph
    node = ValueNode()
    graph = Graph("MayapyGraph", [node])
    MayapyEngine().evaluate_entire_graph(graph)

 ✔ Deserialize has to find the correct Node! @done (17-09-17 13:09)
 ✔ Static method on the INode @done (17-09-17 13:09)
 ✔ Move MayapyEngine to tinypipeline @done (17-09-19 21:51)

 ✔ Make it possible to just connect nodes @done (17-09-22 22:27)
  ✔ Graphs should have inputs and outputs @done (17-09-22 22:27)
  ✔ Serialize Graph @done (17-09-22 22:27)
  ✔ Deserialize Graph @done (17-09-22 22:27)
 ✔ Serialize the graph name @done (17-09-22 22:27)
 ✔ EvaluationGrid of subgraphs is wrong @done (17-09-23 09:57)
 ✔ Graph not correct, open comes after save @done (17-09-23 14:47)
  ✔ The connections are not serialized of course @done (17-09-23 14:06)
  ✔ Test graph serialization @done (17-09-23 14:47)
 ✔ Exchange unicode __str__ in plugs @done (17-09-23 14:47)
 ✔ Move the celery stuff out of it, put onto branch @done (17-09-23 15:02)
 ✔ Add a license @done (17-09-23 15:07)
 ✔ Rename to evaluation_matrix @done (17-09-23 21:32)

 ✘ Jupyter: Make the module available @cancelled (17-09-27 22:32)
 ✘ Jupyter: Find an online host @cancelled (17-09-27 22:29)
 ✔ Print the graph properly @done (17-09-27 22:29)
 ✔ requirements @done (17-09-28 22:36)
 ✔ Dont need the identifier in the inputs??? @done (17-09-28 22:36)

 ✔ Write docs @done (17-09-28 22:58)
 ✔ Implement a good example: @done (17-09-28 22:58)
 ✔ default kwargs dont work??? @done (17-09-28 23:03)

import sys
sys.path.append('C:/PROJECTS/ascii-canvas')


## Notes
http://stackoverflow.com/questions/29547695/celery-access-all-previous-results-in-a-chain


## Graph Execution
The Graph will be run in the given Engine. flowpipe parses the dependency tree and sorts the nodes into a grid. The rows in the grid are executed in sequential order, whereas the Nodes in each row can be executed in parallel.

Parallel evaluation is currently only possible through the built in Celery integration.

## Celery Integration
The flowpipe graph can be serialized into a structure for Celery. Redis is used as a backend for the data serialization.

### Installation Guide
Celery is in the requirements for flowpipe, but additional software needs to be made available:

    * Redis  TODO: Link
    * Install RabbitMq  TODO: Link
    * Celery Flower (optional) TODO: Link

 ☐ Graph.expand_evaluation_matrix()
 ☐ Test with a converging graph that converges together again
 ☐ Why does it print the debug twice?
 ☐ Check for redundant tests

v0.2.0:
 ✔ Simplified API @done (17-10-21 11:04)
  ✔ Arbitrary Node created through a decorator wrapping a function that will serve as the compute method @done (17-10-21 11:04)
 ✔ Serialize the docstring as well @done (17-10-21 11:04)
 ✔ finish docs @done (17-10-23 22:52)
 ✔ commit @done (17-10-23 22:52)

 ✔ Fix this in the repo: TypeError: on_input_plug_set_dirty() takes exactly 1 argument (2 given) @done (17-10-23 19:43)
 ✔ Convert tests to use evaluate @done (17-10-23 22:43)
 ✔ Fix this in the repo: self as first argument is ignored and taken as self by the class @done (17-10-23 22:29)
   ✔ make this optional, only apply if self is present @done (17-10-23 22:29)
 ✔ use correct quotes @done (17-10-23 22:43)
 ✔ @function_as_node -> @node @done (17-10-23 22:52)
 ✔ Assign input characters if the wrapped func is called with args @done (17-10-27 19:08)
 ✔ How to assign values to Nodes in a Graph? @done (17-10-27 19:23)
 ✔ Option to Print Node/Graph as list with InputPlug: Value @done (17-10-27 19:57)
 ☐ Functions in Graph mark as nodes and automatically append to self.nodes
 ☐ Show the values from the output plug in the input field if possible
  ☐ Nodes with the same name?

- [ ] PySide UI
  - [ ] Deserialize Graph from json
  - [ ] Serialize Graph to json
  - [ ] Draw Connection
  - [ ] Move Node
  - [ ] Layout Graph

v0.3.0:
- [ ] PySide UI
  - [ ] Remove Node
  - [ ] Connect Node
  - [ ] Disconnect Node
  - [ ] Set Value on Node
  - [ ] Rename Node

v1.0.0:
- [ ] PySide UI
  - [ ] Evaluate Graph
    - [ ] Show dirty/clean nodes

v1.1.0:
- [ ] Celery support (Use Celery to distrbute the Graph over a network of Workers and make parallel evaluation possible)

v1.2.0:
- [ ] Simplified API
  - [ ] Arbitrary Node creatyed through a decorator wrapping a function that will serve as the compute method

v1.3.0:
- [ ] Framework for creating tools from a Graph
  - [ ] Parse the Graph and aggregate a simple input mask
- [ ] Verify data type on the plug, allow bool, int, float, str

Version 1.1 ////////////////////////////////////:
 ☐ @api.node() for easy creation of Nodes from functions
 ☐ Celery Support
  Bugs:
   ☐ Can't use nodes that are not in the root of Celery?
   ☐ Celery issue: last node is not executed
  ☐ Reproducible Example of Celery
   ☐ Move the configs to a general config
   ☐ Start it all through a central script
 ☐ Put unnecessary things to test_requirements

Version 1.2 ////////////////////////////////////:
 ☐ Separate engines per node?

Version 1.3 ////////////////////////////////////:
 ☐ Input Nodes:
  ☐ Prompt the user for input
  ☐ Parse Graph for input nodes
  ☐ Construct a frontend from it

Version 1.3 ////////////////////////////////////:
 ☐ Use yield statement for a continuous evaluation of the Graph
